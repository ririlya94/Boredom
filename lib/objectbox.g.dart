// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'utilities/database/dto/activity.dto.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6848622034006427845),
      name: 'ActivityDto',
      lastPropertyId: const IdUid(8, 702044783572874540),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6919223352446042704),
            name: 'boxId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1112016284367129796),
            name: 'activity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4372482532476719877),
            name: 'accessibility',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7451935085059804557),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3764829688192056320),
            name: 'participants',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2202904520238194916),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8457940590482552035),
            name: 'link',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 702044783572874540),
            name: 'key',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 6848622034006427845),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ActivityDto: EntityDefinition<ActivityDto>(
        model: _entities[0],
        toOneRelations: (ActivityDto object) => [],
        toManyRelations: (ActivityDto object) => {},
        getId: (ActivityDto object) => object.boxId,
        setId: (ActivityDto object, int id) {
          object.boxId = id;
        },
        objectToFB: (ActivityDto object, fb.Builder fbb) {
          final activityOffset = fbb.writeString(object.activity);
          final typeOffset = fbb.writeString(object.type);
          final linkOffset =
              object.link == null ? null : fbb.writeString(object.link!);
          final keyOffset =
              object.key == null ? null : fbb.writeString(object.key!);
          fbb.startTable(9);
          fbb.addInt64(0, object.boxId);
          fbb.addOffset(1, activityOffset);
          fbb.addFloat64(2, object.accessibility);
          fbb.addOffset(3, typeOffset);
          fbb.addInt64(4, object.participants);
          fbb.addFloat64(5, object.price);
          fbb.addOffset(6, linkOffset);
          fbb.addOffset(7, keyOffset);
          fbb.finish(fbb.endTable());
          return object.boxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ActivityDto()
            ..boxId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..activity = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..accessibility =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..participants =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..price =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..link = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..key = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ActivityDto] entity fields to define ObjectBox queries.
class ActivityDto_ {
  /// see [ActivityDto.boxId]
  static final boxId =
      QueryIntegerProperty<ActivityDto>(_entities[0].properties[0]);

  /// see [ActivityDto.activity]
  static final activity =
      QueryStringProperty<ActivityDto>(_entities[0].properties[1]);

  /// see [ActivityDto.accessibility]
  static final accessibility =
      QueryDoubleProperty<ActivityDto>(_entities[0].properties[2]);

  /// see [ActivityDto.type]
  static final type =
      QueryStringProperty<ActivityDto>(_entities[0].properties[3]);

  /// see [ActivityDto.participants]
  static final participants =
      QueryIntegerProperty<ActivityDto>(_entities[0].properties[4]);

  /// see [ActivityDto.price]
  static final price =
      QueryDoubleProperty<ActivityDto>(_entities[0].properties[5]);

  /// see [ActivityDto.link]
  static final link =
      QueryStringProperty<ActivityDto>(_entities[0].properties[6]);

  /// see [ActivityDto.key]
  static final key =
      QueryStringProperty<ActivityDto>(_entities[0].properties[7]);
}
